class Solution {
    static int[][] dir = {{-1,0},{1,0},{0,1},{0,-1}};
    public int swimInWater(int[][] grid) {
        int n = grid.length, res = 0;
        boolean[][] vis = new boolean[n][n];
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>((k1, k2)->grid[k1 / n][k1 % n] - grid[k2 / n][k2 % n]);
        pq.offer(0);
        while (!pq.isEmpty()){
            int pos = pq.poll(), div = pos / n, rem = pos % n;
            res = Math.max(res, grid[div][rem]);
            if(div == n-1 && rem == n-1) return res;
            for(int i=0;i<4;i++){
                int X = div+dir[i][0], Y = rem+dir[i][1];
                if(X < 0 || X >= n || Y < 0 || Y >= n || vis[X][Y] == true) continue;
                vis[X][Y] = true;
                pq.offer(X*n+Y);
            }
        }
        return -1;
    }
}