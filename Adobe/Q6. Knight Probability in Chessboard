class Solution {
    static double[][][] dp;

    public double knightProbability(int n, int k, int row, int column) {
        dp = new double[n+1][n+1][k+1];
        for(int i=0;i<=n;i++){
            for(int j=0;j<=n;j++){
                for(int m=0;m<=k;m++){
                    dp[i][j][m]=-1;
                }
            }
        }
        return solve(row, column, k, n);
    }

    static int[][] arr = {{-2,-1},{-2,1},{2,-1},{2,1},{-1,-2},{1,-2},{-1,2},{1,2}};

    public static double solve(int i, int j, int m, int n){
        if(i<0 || j<0 || i>=n || j>=n) return 0;
        if(m==0) return 1;
        if (dp[i][j][m] != -1) return dp[i][j][m];
        double safe=0;
        for(int k=0;k<8;k++){
            int x=arr[k][0]+i, y=arr[k][1]+j;
            safe+=solve(x, y, m-1, n);
        }
        safe = safe/8;
        return dp[i][j][m]=safe;
    }
}