class Solution {
    public int[] closestPrimes(int left, int right) {
        int[] ans = new int[2];
        Arrays.fill(ans,-1);
        ArrayList<Integer> arr = sieveOfEratosthenes(right, left, right);
        int diff=Integer.MAX_VALUE;
        for(int i=0;i<arr.size()-1;i++){
            if(diff>arr.get(i+1)-arr.get(i)){
                ans[0]=arr.get(i);
                ans[1]=arr.get(i+1);
                diff=arr.get(i+1)-arr.get(i);
            }
        }
        return ans;
    }

    static ArrayList<Integer> sieveOfEratosthenes(int n, int l, int r){
        boolean prime[] = new boolean[n+1];
        for(int i=0;i<=n;i++) prime[i] = true;
        for(int p = 2; p*p <=n; p++){
            if(prime[p] == true){
                for(int i = p*p; i <= n; i += p) prime[i] = false;
            }
        }
        ArrayList<Integer> arr = new ArrayList<>();
        if(l==1) l=2;
        for(int i = l; i <= r; i++){
            if(prime[i] == true) arr.add(i);
        }
        return arr;
    }
}