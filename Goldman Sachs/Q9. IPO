class Pair{
    int first, second;
    Pair(int first, int second){
        this.first=first;
        this.second=second;
    }
}
class comp implements Comparator<Pair>{
    public int compare(Pair a, Pair b){
        if(a.first > b.first) return 1;
        else if(a.first < b.first) return -1;
        else{
            if(a.second > b.second) return 1;
            else if(a.second < b.second) return -1;
            else return 0;
        }
    }
}
class Solution {
    public int findMaximizedCapital(int k, int w, int[] profits, int[] capital) {
        Pair[] arr = new Pair[profits.length];
        for(int i = 0; i<profits.length; i++) arr[i]= new Pair(capital[i],profits[i]);
        Arrays.sort(arr,new comp());
        PriorityQueue<Integer> pq = new PriorityQueue<>(Comparator.reverseOrder());
        int ans = 0, i=0;
        while(i<arr.length && k>0){
            if(w>=arr[i].first) pq.add(arr[i++].second);
            else{
                if(pq.isEmpty()) return w;
                w += pq.peek();
                pq.remove();
                k--;
            }
        }
        while(k-->0 && !pq.isEmpty()){
            w += pq.peek();
            pq.remove();
        }
        return w;
    }
}