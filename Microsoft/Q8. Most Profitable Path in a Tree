class Solution {
    List<Integer> path = new ArrayList<>();
    int maxSum = Integer.MIN_VALUE;
    
    public int mostProfitablePath(int[][] edges, int bob, int[] amount) {
        int n=amount.length;
        Map<Integer, Set<Integer>> map = new HashMap<>();
        for(int i=0;i<n;i++) map.put(i, new HashSet<>());
        for(int[] edge: edges){
            int u = edge[0];
            int v = edge[1];
            map.get(v).add(u);
            map.get(u).add(v);
        }
        dfs(bob, 0, map, new ArrayList<Integer>(){{add(bob); }}, new HashSet<Integer>(){{add(bob); }});
        for (int i = 0; i < path.size() / 2; i++) {
            amount[path.get(i)] = 0;
        }
        if (path.size() % 2 != 0) {
            int m = path.get(path.size() / 2);
            amount[m] /= 2;
        }
        Set<Integer> visited = new HashSet<>();
        visited.add(0);
        maxPathSum(0, map, amount, visited, amount[0]);
        return maxSum;
    }
    
    private boolean dfs(int root, int target,  Map<Integer, Set<Integer>> map, List<Integer> currPath, Set<Integer> visited) {
        if (root == target) {
            path = new ArrayList<>(currPath);
            return true;
        }
        for (int neighbor : map.get(root)) {
            if (visited.contains(neighbor)) continue;
            visited.add(neighbor);
            currPath.add(neighbor);
            if (dfs(neighbor, target, map, currPath, visited)) return true;
            currPath.remove(currPath.size() - 1);
            visited.remove(neighbor);
        }
        return false;
    }
    
    private void maxPathSum(int root, Map<Integer, Set<Integer>> map, int[] amount, Set<Integer> visited, int currSum) {
        int cnt = 0;
        for (int child : map.get(root)) {
            if (visited.contains(child)) continue;
            visited.add(child);
            maxPathSum(child, map, amount, visited, currSum + amount[child]);
            visited.remove(child);
            cnt++;
            
        }
        if (cnt == 0) maxSum = Math.max(maxSum, currSum);
        return;
    }
}